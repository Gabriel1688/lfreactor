// this class use to handle lf event then notify the real observer
// andycai.sc@gmail.com 2013-03-20
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#ifndef LFEVENTOBSERVER_H_INCLUDED
#define LFEVENTOBSERVER_H_INCLUDED

#include "Poco/AbstractObserver.h"
#include "Poco/SharedPtr.h"
#include "Poco/Net/Socket.h"
#include "NameSpaceDefine.h"
#include ADD_QUOTE(INC_NAME_HEADER(NAMESPACE_NAME, ThreadManager.h))

BEGIN_CXX_NAMESPACE_DEFINITION

class DYNAMIC_LIB LfEventObserver : public Poco::AbstractObserver
{
public:
    LfEventObserver(const Poco::Net::Socket& sock, const Poco::AbstractObserver& observer,
                    ThreadManager& thrMgr);
    LfEventObserver(const LfEventObserver& lfObs);
    ~LfEventObserver();

    void notify(Poco::Notification* pNf) const;

    bool equals(const Poco::AbstractObserver& observer) const;

    bool accepts(Poco::Notification* pNf) const;

    Poco::AbstractObserver* clone() const;

private:
    Poco::Net::Socket m_socket;
    Poco::SharedPtr<Poco::AbstractObserver> m_observer;
    ThreadManager& m_thrManager;
};

END_CXX_NAMESPACE_DEFINITION

#endif // LFEVENTOBSERVER_H_INCLUDED
