// define socket notifications
// andycai.sc@gmail.com 2013-03-18
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#ifndef SOCKNOTIFICATION_H_INCLUDED
#define SOCKNOTIFICATION_H_INCLUDED

#include "Poco/Net/Net.h"
#include "Poco/Net/Socket.h"
#include "Poco/Notification.h"

#include "NameSpaceDefine.h"

BEGIN_CXX_NAMESPACE_DEFINITION

class SockReactor;

class DYNAMIC_LIB SockNotification: public Poco::Notification
{
public:
	explicit SockNotification(SockReactor* pReactor);

	virtual ~SockNotification();

	SockReactor& source();

	Poco::Net::Socket& socket();

private:
	void setSocket(const Poco::Net::Socket& socket);

	SockReactor* m_pReactor;
	Poco::Net::Socket  m_socket;

	friend class SockNotifier;
};


class DYNAMIC_LIB ReadableNotification: public SockNotification
{
public:
	ReadableNotification(SockReactor* pReactor);

	~ReadableNotification();
};


class DYNAMIC_LIB WritableNotification: public SockNotification
{
public:
	WritableNotification(SockReactor* pReactor);

	~WritableNotification();
};


class DYNAMIC_LIB ErrorNotification: public SockNotification
{
public:
	ErrorNotification(SockReactor* pReactor);

	~ErrorNotification();
};


class DYNAMIC_LIB TimeoutNotification: public SockNotification
{
public:
	TimeoutNotification(SockReactor* pReactor);

	~TimeoutNotification();
};


class DYNAMIC_LIB IdleNotification: public SockNotification
{
public:
	IdleNotification(SockReactor* pReactor);

	~IdleNotification();
};


class DYNAMIC_LIB ShutdownNotification: public SockNotification
{
public:
	ShutdownNotification(SockReactor* pReactor);

	~ShutdownNotification();
};

END_CXX_NAMESPACE_DEFINITION

#endif // SOCKNOTIFICATION_H_INCLUDED
