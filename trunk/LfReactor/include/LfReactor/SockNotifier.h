// this class use to notify sockets' event
// andycai.sc@gmail.com 2013-03-11
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#ifndef SOCKNOTIFIER_H
#define SOCKNOTIFIER_H

#include "NameSpaceDefine.h"

#include "Poco/Net/Net.h"
#include "Poco/Net/Socket.h"
#include "Poco/RefCountedObject.h"
#include "Poco/NotificationCenter.h"
#include "Poco/Observer.h"
#include <set>

BEGIN_CXX_NAMESPACE_DEFINITION

class SockReactor;
class SockNotification;

class DYNAMIC_LIB SockNotifier: public Poco::RefCountedObject
{
public:
	explicit SockNotifier(const Poco::Net::Socket& sock);

	void addObserver(SockReactor* pReactor, const Poco::AbstractObserver& observer);

	void removeObserver(SockReactor* pReactor, const Poco::AbstractObserver& observer);

	bool accepts(SockNotification* pNotification);

	void dispatch(SockNotification* pNotification);

	bool hasObservers() const;

    std::size_t countObservers() const;

    void suspendObserver(SockReactor* pReactor, const Poco::AbstractObserver& observer);
    void resumeObserver(SockReactor* pReactor, const Poco::AbstractObserver& observer);

protected:
	~SockNotifier();

	SockNotification* clone(SockNotification* pNotification);

private:
	std::multiset<SockNotification*> m_notifications;

	Poco::NotificationCenter m_notifiCenter;
	Poco::Net::Socket  m_socket;

	typedef Poco::SharedPtr<Poco::AbstractObserver> AbstractObserverPtr;
	typedef std::vector<AbstractObserverPtr> ObserverList;

	ObserverList  m_observers; //use to record observers
	Poco::Mutex m_mutex;
};

END_CXX_NAMESPACE_DEFINITION

#endif
