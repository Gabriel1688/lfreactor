// implement LfEventObserver
// andycai.sc@gmail.com 2013-03-20
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "NameSpaceDefine.h"
#include ADD_QUOTE(INC_NAME_HEADER(NAMESPACE_NAME, LfEventObserver.h))

BEGIN_CXX_NAMESPACE_DEFINITION

LfEventObserver::LfEventObserver(const Poco::Net::Socket& sock, const Poco::AbstractObserver& observer,
ThreadManager& thrMgr) : m_socket(sock), m_observer(observer.clone()), m_thrManager(thrMgr)
{
}

LfEventObserver::LfEventObserver(const LfEventObserver& lfObs) : m_socket(lfObs.m_socket),
m_observer(lfObs.m_observer), m_thrManager(lfObs.m_thrManager)
{
}

LfEventObserver::~LfEventObserver()
{
}

void LfEventObserver::notify(Poco::Notification* pNf) const
{
    m_thrManager.suspendEventHandler(m_socket, *this);

    m_thrManager.promoteNewLeader();

    m_observer->notify(pNf);

    m_thrManager.resumeEventHandler(m_socket, *this);
}

bool LfEventObserver::equals(const Poco::AbstractObserver& observer) const
{
    const LfEventObserver* lfObs = dynamic_cast<const LfEventObserver*>(&observer);
    return lfObs && m_observer->equals(*(lfObs->m_observer));
}

bool LfEventObserver::accepts(Poco::Notification* pNf) const
{
    return m_observer->accepts(pNf);
}

Poco::AbstractObserver* LfEventObserver::clone() const
{
    return new LfEventObserver(*this);
}

END_CXX_NAMESPACE_DEFINITION
