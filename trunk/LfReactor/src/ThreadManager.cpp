// imeplement ThreadMannager
// andycai.sc@gmail.com 2013-03-07
//
// Permission is hereby granted, free of charge, to any person or organization
// obtaining a copy of the software and accompanying documentation covered by
// this license (the "Software") to use, reproduce, display, distribute,
// execute, and transmit the Software, and to prepare derivative works of the
// Software, and to permit third-parties to whom the Software is furnished to
// do so, all subject to the following:
//
// The copyright notices in the Software and this entire statement, including
// the above license grant, this restriction and the following disclaimer,
// must be included in all copies of the Software, in whole or in part, and
// all derivative works of the Software, unless such copies or derivative
// works are solely in the form of machine-executable object code generated by
// a source language processor.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR
// IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,
// FITNESS FOR A PARTICULAR PURPOSE, TITLE AND NON-INFRINGEMENT. IN NO EVENT
// SHALL THE COPYRIGHT HOLDERS OR ANYONE DISTRIBUTING THE SOFTWARE BE LIABLE
// FOR ANY DAMAGES OR OTHER LIABILITY, WHETHER IN CONTRACT, TORT OR OTHERWISE,
// ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER
// DEALINGS IN THE SOFTWARE.
//

#include "NameSpaceDefine.h"
#include ADD_QUOTE(INC_NAME_HEADER(NAMESPACE_NAME, ThreadManager.h))
#include ADD_QUOTE(INC_NAME_HEADER(NAMESPACE_NAME, LfEventObserver.h))

BEGIN_CXX_NAMESPACE_DEFINITION

ThreadManager::ThreadManager(SockReactor* reactor) : m_reactor(reactor), m_leaderThr(0)
{
}

ThreadManager::~ThreadManager()
{
}

void ThreadManager::addEventHandler(const Poco::Net::Socket& socket, const Poco::AbstractObserver& observer, Type type)
{
    if (AUTOSUSRES == type)
        m_reactor->addEventHandler(socket, LfEventObserver(socket, observer, *this));
    else if (MANUSUSRES == type)
        m_reactor->addEventHandler(socket, observer);
}

void ThreadManager::removeEventHandler(const Poco::Net::Socket& socket, const Poco::AbstractObserver& observer, Type type)
{
    if (AUTOSUSRES == type)
        m_reactor->removeEventHandler(socket, LfEventObserver(socket, observer, *this));
    else if (MANUSUSRES == type)
        m_reactor->removeEventHandler(socket, observer);
}

LfThread* ThreadManager::join(LfThread* lfThr)
{
	Poco::Mutex::ScopedLock locker(m_thrMutex);
	if (0 != m_leaderThr && m_leaderThr != lfThr)
		m_thrStack.push(lfThr);
	else
		m_leaderThr = lfThr;
	return m_leaderThr;
}

void ThreadManager::promoteNewLeader()
{
	Poco::Mutex::ScopedLock locker(m_thrMutex);
	if (m_thrStack.empty())
		m_leaderThr = 0;
	else
	{
		m_leaderThr = m_thrStack.top();
		m_thrStack.pop();
		m_leaderThr->active();
	}
}

void ThreadManager::handleEvents()
{
	m_reactor->handleEvents();
}

void ThreadManager::stopAll()
{
    Poco::Mutex::ScopedLock locker(m_thrMutex);
    while (!m_thrStack.empty())
    {
        LfThread* lfThr = m_thrStack.top();
        lfThr->stop();
        m_thrStack.pop();
    }

    if (m_leaderThr)
        m_leaderThr->stop();
}

void ThreadManager::suspendEventHandler(const Poco::Net::Socket& socket, const Poco::AbstractObserver& observer)
{
    m_reactor->suspendEventHandler(socket, observer);
}

void ThreadManager::resumeEventHandler(const Poco::Net::Socket& socket, const Poco::AbstractObserver& observer)
{
    m_reactor->resumeEventHandler(socket, observer);
}

END_CXX_NAMESPACE_DEFINITION
